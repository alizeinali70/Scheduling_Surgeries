<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btn_Back.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>